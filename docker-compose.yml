version: "3.6" # important, so that we can name our network

services:
  traefik:
    image: traefik:v2.2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $TRAEFIK_DIR/traefik.yaml:/traefik.yaml
      - $TRAEFIK_DIR/traefik_dynamic.yaml:/traefik_dynamic.yaml
      - $TRAEFIK_DIR/domain.crt:/domain.crt
      - $TRAEFIK_DIR/domain.key:/domain.key
    ports:
      - 80:80
      - 443:443
    networks:
      - traefik-global-proxy

  pwa:
    build: $PWA_DIR
    environment:
        HOST: 0.0.0.0
        PORT: $PWA_PORT
    working_dir: /usr/src/app
    volumes:
      - $PWA_DIR:/usr/src/app
    expose:
      - $PWA_PORT
    networks:
      - traefik-global-proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.pwa.rule=Host(`$PWA_HOST`)
      - traefik.http.routers.pwa.tls=true
      - traefik.http.routers.pwa.service=pwaservice
      - traefik.http.services.pwaservice.loadbalancer.server.port=$PWA_PORT
      - traefik.http.routers.pwa.middlewares=errorpage@file
    depends_on:
      - traefik

  # employer:
  #   build: $EMPLOYER_DIR
  #   environment:
  #       HOST: 0.0.0.0
  #       PORT: $EMPLOYER_PORT
  #   volumes:
  #     - $EMPLOYER_DIR:/usr/src/app
  #   working_dir: /usr/src/app
  #   expose:
  #     - $EMPLOYER_PORT
  #   networks:
  #     - traefik-global-proxy
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.employer.rule=Host(`$EMPLOYER_HOST`)
  #     - traefik.http.routers.employer.tls=true
  #     - traefik.http.routers.employer.middlewares=errorpage@file
  #   depends_on:
  #     - traefik


#  breadcrumbs-api-core:
#    build: $API_DIR
#    entrypoint: ["/app/lib/entrypoint.sh"]
#    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
#    expose:
#      - 3000
#    depends_on:
#      - breadcrumbs-api-core-database
#    networks:
#      - traefik-global-proxy
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.apicore.rule=Host(`$PWA_HOST`) && Path($API_PATHS)"
#      - traefik.http.routers.apicore.tls=true
#      - "traefik.http.routers.apicore.service=apiservice"
#      - "traefik.http.services.apiservice.loadbalancer.server.port=$API_PORT"
#
  breadcrumbs-api-core-database:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=Breadcrumbs_api_core_development
    expose:
      - 5432
    networks:
      - traefik-global-proxy
    restart: always
    
  quarkus:
    build:
      context: ./breadcrumbs-quarkus
      dockerfile: src/main/docker/Dockerfile.jvm
    expose:
       - $QUARKUS_PORT
    depends_on:
      - traefik
      - breadcrumbs-api-core-database
    networks:
      - traefik-global-proxy
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.quarkus.rule=Host(`$PWA_HOST`) && PathPrefix(`/api/`, `/auth/`)
      - traefik.http.routers.quarkus.tls=true
      - traefik.http.routers.quarkus.service=quarkusservice
      - traefik.http.services.quarkusservice.loadbalancer.server.port=$QUARKUS_PORT
      - traefik.http.routers.quarkus.middlewares=errorpage@file

  # quarkus-auth:
  #   build:
  #     context: ./quarkus-auth2
  #     dockerfile: src/main/docker/Dockerfile.jvm
  #   expose:
  #       - 8081
  #   depends_on:
  #     - traefik
  #     - breadcrumbs-api-core-database
  #   networks:
  #     - traefik-global-proxy
  #   restart: always
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.auth-router.rule=Host(`$AUTH_HOST`)
  #     - traefik.http.routers.auth-router.tls=true
  #     - traefik.http.routers.auth-router.service=authservice
  #     - traefik.http.services.authservice.loadbalancer.server.port=8081
  #     - traefik.http.routers.auth-router.middlewares=errorpage@file

# this is the network that every container should connect to, in order to communicate with Traefik. We give it a nice name to type it easier.
networks:
  traefik-global-proxy:
    external: true
